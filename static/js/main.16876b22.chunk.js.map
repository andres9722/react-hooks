{"version":3,"sources":["components/ToDoList/ToDoList.jsx","components/Error404/Error404.jsx","components/Menu/Menu.jsx","components/Dashboard/Dashboard.jsx","components/Utils/Routes.jsx","components/Title/Title.jsx","App.jsx","serviceWorker.js","index.js"],"names":["ToDoList","id","_useState","useState","text","_useState2","Object","slicedToArray","todos","setTodos","useEffect","document","title","concat","length","react_default","a","createElement","onSubmit","e","form","target","preventDefault","value","reset","placeholder","type","name","map","todo","key","Error404","Menu","className","Link","to","Dashboard","viewBox","height","fill","fillRule","d","components_Menu_Menu","Routes","Switch","Route","path","exact","component","Title","_ref","children","theme","App","BrowserRouter","components_Title_Title","Utils_Routes","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16876b22.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nconst ToDoList = () => {\r\n  let id = 0\r\n  const [todos, setTodos] = useState([{ text: 'Learn hooks', id }])\r\n\r\n  const handleOnAddTask = e => {\r\n    let form = e.target\r\n    e.preventDefault()\r\n    setTodos(todos.concat({ text: form.text.value, id: ++id }))\r\n    form.reset()\r\n  }\r\n\r\n  useEffect(() => {\r\n    document.title = `😄 ${todos[todos.length - 1].text} 😄`\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleOnAddTask}>\r\n        <input placeholder='text' type='text' name='text' id='text' />\r\n      </form>\r\n      <ul>\r\n        {todos.map(todo => <li key={todo.text}> {todo.text} 😄 </li>)}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ToDoList\r\n","import React from 'react'\r\n\r\nconst Error404 = () => <div> Error 404 </div>\r\n\r\nexport default Error404\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './Menu.scss'\r\n\r\nconst Menu = () => {\r\n  return (\r\n    <nav className='nav'>\r\n      <ul className='menu'>\r\n        <li className='menu__item'>\r\n          <Link className='menu__link' to='/todos'>use state hook</Link>\r\n        </li>\r\n        <li className='menu__item'>\r\n          <Link className='menu__link' to='/state'>\r\n            state custom hooks\r\n          </Link>\r\n        </li>\r\n        <li className='menu__item'>\r\n          <Link className='menu__link' to='/effect'>use effect hook</Link>\r\n        </li>\r\n        <li className='menu__item'>\r\n          <Link className='menu__link' to='/memo'>react memo</Link>\r\n        </li>\r\n        <li className='menu__item'>\r\n          <Link className='menu__link' to='/lazy'>react lazy</Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Menu\r\n","import React from 'react'\r\nimport Menu from '../Menu/Menu'\r\nimport './Dashboard.scss'\r\n\r\nconst Dashboard = () => (\r\n  <div className='dashboard l-container'>\r\n    <div className='content'>\r\n      <svg viewBox='0 0 100 100' height='300' className='content__logo'>\r\n        <path\r\n          fill='#000'\r\n          fillRule='nonzero'\r\n          d='M64.66 60.866a66.762 66.762 0 0 1-6.77 1.024C49.824 73.55 40.276 80.343 34.66 77.1c-3.97-2.291-4.608-8.753-2.44-16.975-8.17-2.225-13.538-6.016-13.538-10.618 0-2.917 2.109-5.497 5.798-7.576l5.315-3.364-3.257 10.223-2.051-3.338c-1.87 1.335-2.82 2.738-2.82 4.055 0 2.981 4.473 5.88 11.403 7.74a66.01 66.01 0 0 1 2.452-6.339c-6.202-12.944-7.378-24.782-1.715-28.052 4.006-2.313 9.992.435 16.085 6.537 6.053-6.046 12.074-8.854 16.087-6.537 2.526 1.459 3.706 4.575 3.662 8.81l.256 6.284-7.225-7.932 3.916-.107c-.22-2.288-.961-3.811-2.102-4.47-2.604-1.503-7.41.976-12.535 6.137a66.742 66.742 0 0 1 4.308 5.396c14.265 1.115 25.06 6.008 25.06 12.533 0 4.632-5.388 8.446-13.738 10.67 2.122 8.137 1.512 14.633-2.456 16.924-2.526 1.458-5.815.922-9.46-1.233l-5.57-2.921 10.481-2.291-1.865 3.445c2.091.953 3.781 1.073 4.922.415 2.57-1.484 2.853-6.765 1.026-13.65zM52.376 36.767a60.495 60.495 0 0 0-2.48-2.994c-.83.938-1.66 1.94-2.486 3.001a81.147 81.147 0 0 1 4.966-.007zm-4.544-5.194c-5.19-5.207-10.005-7.592-12.533-6.132-2.487 1.436-2.833 6.427-1.198 12.986 2.908-.674 6.078-1.157 9.402-1.43a65.552 65.552 0 0 1 4.329-5.424zm-12.917 9.73c1.323 4.2 3.359 8.87 6.073 13.57a77.109 77.109 0 0 0 2.573 4.15c2.067.178 4.222.273 6.438.273a1.493 1.493 0 1 1 0 2.985c-1.43 0-2.84-.036-4.22-.108a60.323 60.323 0 0 0 4.108 4.955c3.038-3.28 6.136-7.452 8.91-12.255a77.272 77.272 0 0 0 2.16-4.01 75.287 75.287 0 0 0-3.014-5.779 1.493 1.493 0 0 1 2.585-1.493 81.665 81.665 0 0 1 2.06 3.794 61.035 61.035 0 0 0 2.3-6.119c-4.32-.968-9.419-1.548-14.889-1.548a77.12 77.12 0 0 0-4.86.152 75.45 75.45 0 0 0-3.298 5.214 1.493 1.493 0 0 1-2.585-1.493 81.874 81.874 0 0 1 2.06-3.377c-2.244.263-4.39.629-6.401 1.089zm12.876 27.954c-2.025-2.17-4.016-4.66-5.903-7.384a65.025 65.025 0 0 1-6.754-1.045c-1.845 6.983-1.483 12.244 1.018 13.688 2.452 1.415 6.856-.7 11.639-5.259zm-8.058-10.669a81.147 81.147 0 0 1-2.44-4.207 59.802 59.802 0 0 0-1.3 3.557 61.05 61.05 0 0 0 3.74.65zm24.067-.602a60.848 60.848 0 0 0-1.314-3.597 81.264 81.264 0 0 1-2.46 4.24 60.47 60.47 0 0 0 3.774-.643zm2.937-.686c7.115-1.89 11.595-4.87 11.595-7.793 0-2.856-4.107-5.638-10.547-7.501-.89 2.87-2.077 5.868-3.52 8.89a64.784 64.784 0 0 1 2.472 6.404zM50 54.85a5.224 5.224 0 1 1 0-10.447 5.224 5.224 0 0 1 0 10.448zm0-2.984a2.239 2.239 0 1 0 0-4.478 2.239 2.239 0 0 0 0 4.478z'\r\n        />\r\n      </svg>\r\n\r\n      <p className='content__text'>just for fun</p>\r\n    </div>\r\n    <Menu />\r\n  </div>\r\n)\r\n\r\nexport default Dashboard\r\n","import React from 'react'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport ToDoList from '../ToDoList/ToDoList'\r\nimport Error404 from '../Error404/Error404'\r\nimport Dashboard from '../Dashboard/Dashboard'\r\n\r\nconst Routes = () => (\r\n  <Switch>\r\n    <Route path='/' exact component={Dashboard} />\r\n    <Route path='/todos' exact component={ToDoList} />\r\n    <Route component={Error404} />\r\n  </Switch>\r\n)\r\n\r\nexport default Routes\r\n","import React from 'react'\r\nimport './Title.scss'\r\n\r\nconst Title = ({ children, theme }) => {\r\n  return (\r\n    <h1 className={theme ? `title title--${theme}` : 'title'}>\r\n      {children}\r\n    </h1>\r\n  )\r\n}\r\n\r\nexport default Title\r\n","import React, { useEffect } from 'react'\nimport { BrowserRouter as Router, Link } from 'react-router-dom'\nimport Routes from './components/Utils/Routes'\nimport './App.scss'\nimport Title from './components/Title/Title'\n\nconst App = () => {\n  useEffect(() => {\n    document.title = `react hooks ⚛️`\n  })\n\n  return (\n    <Router>\n      <div className='app'>\n        <header className='header'>\n          <Link to='/'>\n            <Title theme='light'> react hooks </Title>\n          </Link>\n        </header>\n        <Routes />\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App.jsx'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}